{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/ErrorBoundary.js","Components/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","name","email","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","children","React","Component","Scroll","style","overflowY","border","height","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","includes","length","ErrorBoundary","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0RAkBeA,G,MAfH,SAACC,GACT,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAAMG,MACxC,6BAEI,2BAAIH,EAAMI,MACV,2BAAIJ,EAAMK,WCaXC,EApBC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACnC,OACA,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,WAGtB,OAEQ,6BACCG,ICDMK,EAbE,SAAC,GAA+B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC7B,OACI,yBAAKd,UAAU,OACf,2BACAA,UAAU,0CACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCaHI,G,wDAnBX,WAAYnB,GAAO,IAAD,8BACd,cAAMA,IACDoB,MAAM,CACPC,UAAU,GAHA,E,8DAOGC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAI5B,OAAGG,KAAKJ,MAAMC,SACH,8CAEJG,KAAKxB,MAAM0B,a,GAhBCC,IAAMC,YCSlBC,EATA,SAAC7B,GAEZ,OACI,yBAAK8B,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAkBC,OAAQ,UAC9DjC,EAAM0B,WC2DJQ,E,kDAxDX,aAAc,IAAD,8BACT,gBAmBJC,eAAgB,SAACC,GACd,EAAKX,SAAS,CAAEX,YAAasB,EAAMC,OAAOC,SAnBzC,EAAKlB,MAAM,CAEPb,OAAQ,GACRO,YAAa,IALR,E,gEASO,IAAD,OACfyB,MAAM,6CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKlB,SAAU,CAAElB,OAAQoC,S,+BAcxB,IAAD,OACEC,EAAiBpB,KAAKJ,MAAMb,OAAOsC,QAAO,SAAAtC,GAC5C,OAAOA,EAAOH,KAAK0C,SAAS,EAAK1B,MAAMN,gBAE3C,OAAgC,IAA7BU,KAAKJ,MAAMb,OAAOwC,OACV,2CAIP,yBAAK9C,UAAU,MACf,wBAAIA,UAAU,MAAd,eAEA,kBAAC,EAAD,CAAWc,aAAcS,KAAKW,iBAC9B,kBAAC,EAAD,KACI,kBAACa,EAAD,KACJ,kBAAC,EAAD,CAAUzC,OAAQqC,W,GA7CZjB,IAAMC,WCIJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAEP,kBAAC,EAAD,MAIAC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,c","file":"static/js/main.375fb824.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css'\r\n\r\nconst Card =(props)=>{\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${props.id}`} />\r\n            <div>\r\n                {/* <h2>{props.id}</h2> */}\r\n                <p>{props.name}</p>\r\n                <p>{props.email}</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({ robots }) => {\r\nconst cardComponent = robots.map((user,i) => {\r\n    return (\r\n    <Card\r\n     key={i} \r\n     id={robots[i].id} \r\n     name={robots[i].name} \r\n     email={robots[i].email}/>\r\n    );\r\n})\r\nreturn(\r\n    \r\n        <div>\r\n        {cardComponent}\r\n        </div>\r\n    \r\n);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox =({ searchfield, searchChange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n        <input\r\n        className='pa2 b--green bg-lightest-blue br5(1rem)' \r\n        type='search' \r\n        placeholder='search robots' \r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundry extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n       componentDidCatch(error, info){\r\n           this.setState({hasError: true})\r\n       } \r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>oooooohhhhoooo</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n}\r\nexport default ErrorBoundry;","import React from 'react'\r\n\r\nconst Scroll = (props) =>{\r\n\r\n    return(\r\n        <div style={{overflowY: 'scroll', border:'5px Solid green',height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../Components/CardList'\r\nimport SearchBox from '../Components/SearchBox'\r\n// import { robots } from './robots'\r\nimport './App.css'\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\nimport Scroll from '../Components/Scroll'\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n\r\n            robots: [],\r\n            searchfield: ''\r\n\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('http://jsonplaceholder.typicode.com/users')\r\n        .then(response=> {\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.setState ({ robots: users})\r\n        })\r\n       \r\n        \r\n    }\r\n    onSearchChange= (event) => {\r\n       this.setState({ searchfield: event.target.value })\r\n        \r\n       \r\n       //  console.log(filteredRobots)\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots =>{\r\n            return robots.name.includes(this.state.searchfield)\r\n        })\r\n        if(this.state.robots.length === 0){\r\n            return <h1>Loading....</h1>\r\n        }\r\n        else{\r\n        return(\r\n            <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n    \r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n                <ErrorBoundary>\r\n            <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n            </Scroll>\r\n            </div>\r\n    );\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  \n  <App/>\n\n  \n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}